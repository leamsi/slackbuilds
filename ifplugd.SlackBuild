#!/bin/bash

#BUILD SCRIPT FOR ifplugd (TESTED WITH VERSION(S) 0.28)
# ifplugd can be obtained at http://www.stud.uni-hamburg.de/users/lennart/projects/ifplugd/
CWD=$(pwd)
APPNAME=ifplugd
VERSION=0.28
ARCH=i486
CPU=i686
BUILD=2icv
if [ "$TMP" = "" ]; then
  TMP=/tmp
fi
#This means that "make install" auto copies the doc files (README, INSTALL, etc) in some directory,
# instead of copying or moving those files, this script will create a link in /usr/doc/appname-version
#which points to the right place.
#AUTODOCDIR=usr/share/$APPNAME/doc
#Note that if AUTODOCDIR is set,  these files are ignored
DOCFILES="LICENSE doc/README doc/README.SuSE doc/README.html doc/style.css doc/SUPPORTED_DRIVERS"

#PACKAGE ESPECIFIC COMPILE C/C++ FLAGS (if any)
PKGCFLAGS=
PKGCXXFLAGS=

#PACKAGE ESPECIFIC CONFIGURE FLAGS
PKGCONFIG="--with-initdir=/etc/rc.d/"

if [ ! -d $TMP ]; then
   mkdir -p $TMP
fi

#ESSENTIAL CFLAGS/CPPFLAGS
SLKCFLAGS="-O2 -march=$ARCH -mcpu=$CPU"
SLKCXXFLAGS="$SLKCFLAGS"
SLKCONFIG="--prefix=/usr --sysconfdir=/etc"

#Where the source file is located
SOURCE_DIR=$(pwd)
SOURCE_EXT=.tar.gz
SOURCE_FILE=$APPNAME-$VERSION$SOURCE_EXT

#The name of the untared directory (since sometimes it isn't easy to get it from the tar filename)
EXTRACTED_DIR=$(basename $SOURCE_FILE $SOURCE_EXT)

#Where to build the package... This should NEVER be pointing to the root directory (or any important directory for that matter).
PKG=$TMP/$APPNAME-$VERSION-$ARCH

if [ "$PKG" = "/" -o "$PKG" = "" ]; then
  echo "$0: PKG directory is root!"
  exit
fi

if [ ! -d $PKG ];
then
   mkdir -p $PKG
else
   #remove evidence of last build
   rm -rf $PKG/*
fi

#Get in the build directory and untar the source file
cd $PKG
tar zxf $SOURCE_DIR/$SOURCE_FILE

#You should only run this as root (because you need to change permissions)
if [ ! $UID = 0 ]; then
   echo "$0: RUN ME AS ROOT ONLY!"
   exit
fi

echo " $(basename $0). Building version $VERSION for $ARCH (Build $BUILD) "

cd $EXTRACTED_DIR

#Configure this thing.
./configure $SLKCONFIG $PKGCONFIG CFLAGS="$SLKCFLAGS $PKGCFLAGS" CXXFLAGS="$SLKCXXFLAGS $PKGCXXFLAGS" i486-slackware-linux-gnu
#Make this thing.
make
#Make the fake root directory (used to store files)
mkdir $PKG/rootdir
#Install this ting in the fake root directory
make install DESTDIR=$PKG/rootdir

#Package especific things follow: (do something especific to this package (fix or copy things which are wrong in the installer, etc)

patch $PKG/rootdir/etc/ifplugd/ifplugd.action <<_EOF_
--- ifplugd-0.28/conf/ifplugd.action	2004-03-02 19:02:18.000000000 -0600
+++ ifplugd-0.28-slack/conf/ifplugd.action	2005-12-30 21:01:56.000000000 -0600
@@ -24,7 +24,7 @@
 	exit 1
 fi
 
-[ "\$2" = "up" ] && exec /sbin/ifup \$1
-[ "\$2" = "down" ] && exec /sbin/ifdown \$1
+[ "\$2" = "up" ] && exec /etc/rc.d/rc.inet1 \${1}_start
+[ "\$2" = "down" ] && exec /etc/rc.d/rc.inet1 \${1}_stop
 
 exit 1
_EOF_

sed -i 's/ARGS=\"\(.*\)\"/ARGS=\"\1 -pqb\"/1' $PKG/rootdir/etc/ifplugd/ifplugd.conf

mv $PKG/rootdir/etc/rc.d/ifplugd $PKG/rootdir/etc/rc.d/rc.ifplugd
chmod -x $PKG/rootdir/etc/rc.d/rc.ifplugd
mv $PKG/rootdir/etc/ifplugd/ifplugd.conf $PKG/rootdir/etc/ifplugd/ifplugd.conf.new
#END of package especific things.

#copy doc files
if [ "$AUTODOCDIR" = "" ]; then
  for i in $DOCFILES; do
     if [ -e $i ]; then
        if [ ! -d $PKG/rootdir/usr/doc/$APPNAME-$VERSION ]; then
           mkdir -p $PKG/rootdir/usr/doc/$APPNAME-$VERSION
        fi
        if [ -L $i -o -d $i ]; then
           cp -LR $i $PKG/rootdir/usr/doc/$APPNAME-$VERSION
        else
           cp $i $PKG/rootdir/usr/doc/$APPNAME-$VERSION
        fi
     fi
  done
else
  mkdir -p $PKG/rootdir/usr/doc
  (cd $PKG/rootdir/usr/doc
   ln -sf ../../$AUTODOCDIR $APPNAME-$VERSION
  )
fi

#gzip man and info pages
if [ -d $PKG/rootdir/usr/man ]; then
   gzip -9q $PKG/rootdir/usr/man/*/*
fi
if [ -d $PKG/rootdir/usr/info ]; then
   rm -f $PKG/rootdir/usr/info/dir
   gzip -9q $PKG/rootdir/usr/info/*
fi

cd $PKG/rootdir

#strip executables (this was taken from some SlackBuilds from Pat himself)
(
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip 2> /dev/null
  find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
)

 
mkdir install

#Here comes the slac-desc (yes it is inside the script)
cat > install/slack-desc <<_EOS_
        |-----handy-ruler------------------------------------------------------|

$APPNAME: $APPNAME ($VERSION) is a daemon which will configure ethernet devices
$APPNAME: 
$APPNAME: A Linux daemon that will automatically configure an ethernet device
$APPNAME: when a cable is plugged in and automatically unconfigure it if the 
$APPNAME: cable is pulled. Uses ETHTOOL API, MII API, WLAN API and IFCONFIG
$APPNAME: API. It uses /etc/rc.d/rc.inet1 to start and stop the devices. You 
$APPNAME: may want to "chmod +x /etc/rc.d/rc.ifplud" and run it from some init
$APPNAME: script. In your suspend scripts (if you have any) make sure to call 
$APPNAME: "/etc/rc.d/rc.ifplugd supend" and "/etc/rc.d/rc.ifplugd resume"
$APPNAME: You need to set "-p" in ifplugd.conf config for Slackware unless
$APPNAME: you want to bring up your interface twice.
_EOS_

#This is for linuxpackages.net packages:
cat > install/slack-required <<_EOS_
libdaemon >= 0.10-i486-1
_EOS_

cat > install/doinst.sh <<_EOS_
if [ ! -e /etc/ifplugd/ifplugd.conf ]; then
    mv /etc/ifplugd/ifplugd.conf.new /etc/ifplugd/ifplugd.conf
fi
_EOS_

##This was for adding an automatic loading in rc.local, but it isn't allowed by linuxpackages.net
## just move the following lines before the just past _EOS_ and uncoment.
#if ! grep "rc\.ifplugd" /etc/rc.d/rc.local >/dev/null 2>/dev/null; then
#    ed -s /etc/rc.d/rc.local <<_EOP_
#5a
#
##Start IFPLUGD to monitor the ethernet ports
#if [ -x /etc/rc.d/rc.ifplugd ]; then
#    /etc/rc.d/rc.ifplugd start
#fi
#
#.
#w
#_EOP_
#if [ ! \$? = 0 ]; then
#    echo "An error ocurred while trying to add the startup code to rc.local"
#    echo "Make sure to start the deamon ("/etc/rc.d/rc.ifplugd start") in some way."
#fi
#fi
##End of code to add to rc.local

#Copy ourselfs
mkdir -p usr/src/slackbuilds/
cat $CWD/$0 > usr/src/slackbuilds/$APPNAME-$VERSION-$ARCH-$BUILD.SlackBuild


#Almost-safe default:
chown -R root:root *

find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;
find . -perm 666 -exec chmod 644 {} \;
find . -perm 2775 -exec chmod 755 {} \;
find . -perm 2755 -exec chmod 755 {} \;
find . -perm 2711 -exec chmod 755 {} \;
find . -perm 2751 -exec chmod 755 {} \;
find . -perm 2555 -exec chmod 755 {} \;
find . -perm 2511 -exec chmod 755 {} \;
#Fix some other permision problems:
#Maybe add the suid bits which are necesary.

#End fix of other permission problems.


#Here goes the package :)
/sbin/makepkg -l y -c n ../$APPNAME-$VERSION-$ARCH-$BUILD.tgz

#cleanup and we're done.
cd ..
rm -rf rootdir
rm -rf $EXTRACTED_DIR
