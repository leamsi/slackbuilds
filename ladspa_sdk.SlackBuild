#! /bin/bash
# This is based on generic.SlackBuild version 1.07 by Ismael Cortes.
# I explicitly renunce to all copyrights and responsabilities of this file, so feel free to do
# anything you want to with it.
# NOTE: You should check all the script, and you'll most likely end up changing
# something down below.

#Build Script for ladspa-sdk (tested with version(s) 1.12,1.13)
# ladspa-sdk can be obtained at http://www.ladspa.org/download/
#
# CWD holds the current directory. Lots of things will be relative to it.
CWD=$(pwd)
#This is the name the package will receive. It is usually the application name.
APPNAME=ladspa-sdk
#This is the version number the package will receive. It is usually the application version.
VERSION=1.13
#The target architecture. Slackware uses 486 for most of its packages, and that's a
# recommended setting in linuxpackages.net
# In the case of x86, an 486 binary can be run in any 486 and more recent
# processors.
ARCH=${ARCH:-i486}
# This is the target CPU wich is expected to run the binary. It is used by the
# compiler to optimize stuff.
CPU=${CPU:-i686}
# The build number. Increment this if you repackage, but the version number
# hasn't changed.
BUILD=4icv
# Where to install stuff. Some people prefer to use /usr/local for installed
# things.
INSTALLPREFIX=/usr
# This is the temp directory where the package will be build.
if [ "$TMP" = "" ]; then
  TMP=/tmp
fi


# NOTE: you'll most likely want to gzip man and info pages and strip
# executables. It is a good thing.
# GZIP Man pages (0 is NO, anything else is yes, defaults to yes).
GZIPMAN=${GZIPMAN:-1}
# GZIP Info files (the same rules for GZIPMAN).
GZIPINFO=${GZIPINFO:-1}
#Strip executables and libraries (same rules for GZIPMAN)
STRIPEXES=${STRIPEXES:-1}

#Where the source file is located
SOURCE_DIR=${SOURCE_DIR:-$CWD}
# The name of the source-file
SOURCE_NAME=ladspa_sdk
# The version number of the source file.
SOURCE_VERSION=${VERSION}
# Extension of the source file (if you change this, make sure to change the
# untar command below).
SOURCE_EXT=.tgz
# The name of the source file.
SOURCE_FILE=${SOURCE_NAME}_${SOURCE_VERSION}${SOURCE_EXT}

#The name of the untared/unziped/unwhatever directory (since sometimes it isn't easy to get it from the tar filename)
EXTRACTED_DIR=$SOURCE_NAME

#This means that "make install" auto copies the doc files (README, INSTALL,
# etc) in some directory,
# Instead of copying or moving those files, this script will create a link in
# /usr/doc/appname-version which points to the right place.
# It is relative to the installed ROOT directory.
#AUTODOCDIR=usr/share/$APPNAME/doc

#This variable holds files (relative to the unpackaged source file).
#Note that if AUTODOCDIR is set, these files are ignored
DOCFILES="AUTHORS COPYING LICENSE CREDITS NEWS TODO README ChangeLog FAQ LICENSE doc/"

#PACKAGE ESPECIFIC COMPILE C/C++ FLAGS (if any)
PKGCFLAGS=
PKGCXXFLAGS=

#PACKAGE ESPECIFIC CONFIGURE FLAGS
PKGCONFIG=""



#Where to build the package...
PKG=$TMP/$APPNAME-$VERSION-$ARCH


#You should only run this as root (because you need to change permissions)
if [ ! $UID = 0 ]; then
    echo "$0: The script isn't being run as root."
    echo "$0:  No final pkg is going to be made and permissions will not be set"
    sleep 1
fi

if [ ! -d $TMP ]; then
   mkdir -p $TMP
fi

#ESSENTIAL CFLAGS/CPPFLAGS
SLKCFLAGS="-march=$ARCH -mtune=$CPU -fPIC"
SLKCXXFLAGS="$SLKCFLAGS"
SLKCONFIG="--prefix=${INSTALLPREFIX}"


#Sanity check. If you ever get this warning, then you are insane.
if [ "$PKG" = "/" -o "$PKG" = "" ]; then
  echo "$0: PKG directory is root!"
  exit
fi

if [ ! -d $PKG ];
then
   mkdir -p $PKG
else
   #remove evidence of last build
   rm -rf $PKG/*
fi

cd $SOURCE_DIR  || exit 1
wget -nc http://www.ladspa.org/download/${SOURCE_FILE} || exit 1

#Get in the build directory and untar the source file
cd $PKG
# Sometimes, you may need to change this command.
tar zxf $SOURCE_DIR/$SOURCE_FILE


echo " $(basename $0). Building version $VERSION for $ARCH (Build $BUILD) "

cd $EXTRACTED_DIR

#Configure this thing.
# You may need to change the target string (the one which reads
# i486-slackware-linux-gnu) if it doesn't work with your configure.
#./configure $SLKCONFIG $PKGCONFIG CFLAGS="$SLKCFLAGS $PKGCFLAGS" CXXFLAGS="$SLKCXXFLAGS $PKGCXXFLAGS"  i486-slackware-linux | tee $PKG/configure_log

#Make this thing.
(cd src
make -f makefile INSTALL_PLUGINS_DIR=$INSTALLPREFIX/lib/ladspa INSTALL_INCLUDE_DIR=$INSTALLPREFIX/include  INSTALL_BINARY_DIR=$INSTALLPREFIX/bin CC="gcc $SLKCFLAGS $PKGCFLAGS" CPP="g++ $SLKCXXFLAGS $PKGCXXFLAGS" targets | tee make_log
#Make the fake root directory (used to store files)
mkdir $PKG/rootdir
#Install this ting in the fake root directory
# Some packages use ROOT instead of DESTDIR, and a few others use something
# else. Make sure to check that before running up to this point.
make -f makefile INSTALL_PLUGINS_DIR=$PKG/rootdir/$INSTALLPREFIX/lib/ladspa INSTALL_INCLUDE_DIR=$PKG/rootdir/$INSTALLPREFIX/include  INSTALL_BINARY_DIR=$PKG/rootdir/$INSTALLPREFIX/bin CC="gcc $SLKCFLAGS $PKGCFLAGS" CPP="g++ $SLKCXXFLAGS $PKGCXXFLAGS" install
)
#Package especific things follow: (do something especific to this package (fix or copy things which are wrong in the installer, etc)

# # This was removed because Audacity detected the plugins twice with it.
# # I'd really prefer to have it there to support some other misconfigured
# # applications.
#if [ ! "$INSTALLPREFIX" = "/usr/local" ]; then
#    mkdir -p $PKG/rootdir/usr/local/lib/
#    ( cd $PKG/rootdir/usr/local/lib
#    ln -s $INSTALLPREFIX/lib/ladspa ladspa )
#fi

# Should we set the LADSPA_PATH variable?
mkdir -p $PKG/rootdir/etc/profile.d
cat > $PKG/rootdir/etc/profile.d/ladspa.sh <<_EOF_
#!/bin/sh

export LADSPA_PATH=\$HOME/.ladspa:$INSTALLPREFIX/lib/ladspa
_EOF_
chmod +x $PKG/rootdir/etc/profile.d/ladspa.sh

# The plugins included with the sdk are considered examples only, and they also come
# with the CMT package provided with ladspa. So I'm gonna remove them and
# instead add the source code.
rm -f $PKG/rootdir/$INSTALLPREFIX/lib/ladspa/*
(cd src
make -f makefile clean
mkdir -p $PKG/rootdir/usr/doc/$APPNAME-$VERSION/src
cp -R * $PKG/rootdir/usr/doc/$APPNAME-$VERSION/src
)


#END of package especific things.

#copy doc files
if [ "$AUTODOCDIR" = "" ]; then
  for i in $DOCFILES; do
     if [ -e $i ]; then
        if [ ! -d $PKG/rootdir/usr/doc/$APPNAME-$VERSION ]; then
           mkdir -p $PKG/rootdir/usr/doc/$APPNAME-$VERSION
        fi
        if [ -L $i -o -d $i ]; then
           cp -LR $i $PKG/rootdir/usr/doc/$APPNAME-$VERSION
        else
           cp $i $PKG/rootdir/usr/doc/$APPNAME-$VERSION
        fi
     fi
  done
else
  mkdir -p $PKG/rootdir/usr/doc
  (cd $PKG/rootdir/usr/doc
   ln -sf ../../$AUTODOCDIR $APPNAME-$VERSION
  )
fi

#gzip man and info pages
if [ ! "$GZIPMAN" = "0" ]; then
   if [ -d $PKG/rootdir/$INSTALLPREFIX/man ]; then
      gzip -9q $PKG/rootdir/$INSTALLPREFIX/man/*/*
   fi
   if [ -d $PKG/rootdir/$INSTALLPREFIX/share/man ]; then
       gzip -9q $PKG/rootdir/$INSTALLPREFIX/share/man/*/*
   fi
fi
if [ -d $PKG/rootdir/$INSTALLPREFIX/info ]; then
    rm -f $PKG/rootdir/$INSTALLPREFIX/info/dir
    if [ ! "$GZIPINFO" = "0" ]; then
       gzip -9q $PKG/rootdir/$INSTALLPREFIX/info/*
    fi
fi

cd $PKG/rootdir

#strip executables (this was taken from some SlackBuilds from Pat himself)
if [ ! "$STRIPEXE" = "0" ]; then
    (
      find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip 2> /dev/null
      find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip 2> /dev/null
      find . | xargs file | grep "current ar archive" | cut -f 1 -d : | xargs strip --strip-debug 2> /dev/null
    )
fi

 
mkdir install

#Here comes the slac-desc (yes it is inside the script)
cat > install/slack-desc <<_EOS_
        |-----handy-ruler------------------------------------------------------|

$APPNAME: $APPNAME ($VERSION) Linux Audio Developers Simple Plugin API SDK
$APPNAME: 
$APPNAME: LADSPA provides an uniform API for Audio processing applications to
$APPNAME: use a wide (read: huge) variety of plugins for DSP written in LADSPA.
$APPNAME: 
$APPNAME: This package is required to build LADSPA plugins and applications,
$APPNAME: but it should not be required to run them.
$APPNAME: 
$APPNAME: Note, though, that this package includes some *really* usefull 
$APPNAME: applications to manage LADSPA plugins from command line. And maybe
$APPNAME: some other audio applications do need those.
_EOS_

#This is for linuxpackages.net packages:
cat > install/slack-required <<_EOS_
_EOS_

#Copy ourselfs
mkdir -p usr/src/slackbuilds/
cat $CWD/$0 > usr/src/slackbuilds/$APPNAME-$VERSION-$ARCH-$BUILD.SlackBuild


if [ $UID = 0 ]; then
    #Almost-safe default:
    chown -R root:root *
fi

find . -perm 664 -exec chmod 644 {} \;
find . -perm 600 -exec chmod 644 {} \;
find . -perm 444 -exec chmod 644 {} \;
find . -perm 400 -exec chmod 644 {} \;
find . -perm 440 -exec chmod 644 {} \;
find . -perm 777 -exec chmod 755 {} \;
find . -perm 775 -exec chmod 755 {} \;
find . -perm 511 -exec chmod 755 {} \;
find . -perm 711 -exec chmod 755 {} \;
find . -perm 555 -exec chmod 755 {} \;
find . -perm 666 -exec chmod 644 {} \;
find . -perm 2775 -exec chmod 755 {} \;
find . -perm 2755 -exec chmod 755 {} \;
find . -perm 2711 -exec chmod 755 {} \;
find . -perm 2751 -exec chmod 755 {} \;
find . -perm 2555 -exec chmod 755 {} \;
find . -perm 2511 -exec chmod 755 {} \;
#Fix some other permision problems:
#Maybe add/remove suid bits which are necesary.

#End fix of other permission problems.

 

if [ $UID = 0 ]; then
    #Here goes the package :)
    /sbin/makepkg -l y -c n ../$APPNAME-$VERSION-$ARCH-$BUILD.tgz

    #cleanup and we're done.
    cd ..
    rm -rf rootdir
    rm -rf $EXTRACTED_DIR
fi
