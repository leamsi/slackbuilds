#!/bin/sh
# Copyright (c) 2006 Eric Hameleers <alien@sox.homeip.net>
# Distributed under the terms of the GNU General Public License, Version 2
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:        Eric Hameleers <alien@sox.homeip.net>
# For:       nrg2iso
# URL:       http://gregory.kokanosky.free.fr/v4/linux/nrg2iso.en.html
# Needs:     
# Changelog:
# 0.4-1:   11/Jan/2006 by Eric Hameleers <alien@sox.homeip.net>
#            * Initial build.
# 
# Run 'sh SlackBuild --cleanup' to build a Slackware package.
# The package (.tgz) plus descriptive .txt file are created in /tmp .
# Install using 'installpkg'. 
#
# -----------------------------------------------------------------------------

# --- INIT ---
# Set initial variables:
CWD=`pwd`
if [ "$TMP" = "" ]; then
  TMP=/tmp
fi

PRGNAM=nrg2iso
VERSION=0.4
ARCH=${ARCH:-i486}
BUILD=1

DOCS="gpl.txt CHANGELOG"

# If you have more source files, list them here as SOURCE[1], SOURCE[2], etc.
# If you know the URL for a source file, you can put that into the SRCURL[]
# variable, and the SlackBuild script will try to download it for you.

SOURCE[0]="${PRGNAM}-${VERSION}.tar.gz"
SRCURL[0]="http://gregory.kokanosky.free.fr/v4/linux/${PRGNAM}-${VERSION}.tar.gz"

##
## --- with a little luck, you won't have to edit below this point --- ##
##

case "$ARCH" in
  i386)      SLKCFLAGS="-O2 -march=i386 -mtune=i686" ;;
  i486)      SLKCFLAGS="-O2 -march=i486 -mtune=i686" ;;
  s390)      SLKCFLAGS="-O2" ;;
  powerpc)   SLKCFLAGS="-O2" ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"; LIBDIRSUFFIX="64" ;;
  athlon-xp) SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
esac

PKG=$TMP/package-$PRGNAM

if [ ! -d $TMP/tmp-$PRGNAM ]; then
  mkdir -p $TMP/tmp-$PRGNAM # location to build the source
elif [ "$1" != "--oldbuild" ]; then
  # If the "--oldbuild" parameter is present, we keep
  #  the old build files and continue;
  # By default we remove the remnants of previous build and continue:
  rm -rf $TMP/tmp-$PRGNAM/*
fi

if [ ! -d $PKG ]; then
  mkdir -p $PKG # place for the package to be built
fi


# --- SOURCE FILE AVAILABILITY ---

for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
  if ! [ -f ${CWD}/${SOURCE[$i]} ]; then
    if ! [ "${SRCURL[$i]}" = "" ]; then
      echo "Source '${SOURCE[$i]}' not available yet... will download now:"
      wget -nv -O "${CWD}/${SOURCE[$i]}" "${SRCURL[$i]}"
      if [ $? -ne 0 ]; then
        echo "Downloading '${SOURCE[$i]}' failed... aborting the build."
        exit 1
      fi
    else
      echo "File '${SOURCE[$i]}' not available... aborting the build."
      exit 1
    fi
  fi
done

if [ "$1" == "--download" ]; then
  echo "Download complete."
  exit 0
fi

# --- PACKAGE BUILDING ---

echo "++"
echo "|| $PRGNAM-$VERSION"
echo "++"

# Safety net 8-)
if [ "$PKG" = "" -o "$PKG" = "/" ] ; then
  cat <<-EOT
	Your script sucks!!!
	You were about to delete the contents of your computer's hard disk!
	Please provide a value for the variable 'PKG'.
	EOT
  exit 1
fi
# We always erase old package's contents:
rm -rf $PKG/*

cd $PKG

# Explode the package framework:
if [ -f $CWD/_$PRGNAM.tar.gz ]; then
  explodepkg $CWD/_$PRGNAM.tar.gz
fi

cd $TMP/tmp-$PRGNAM


# --- TARBALL EXTRACTION,PATCH,MODIFY ---

echo "Extracting the program tarball(s) for $PRGNAM..."
for (( i = 0; i < ${#SOURCE[*]}; i++ )) ; do
  if `file $CWD/${SOURCE[$i]} | grep -q ": bzip2"`; then
    tar -xjvf $CWD/${SOURCE[$i]}
  elif `file $CWD/${SOURCE[$i]} | grep -qi ": zip"`; then
    unzip $CWD/${SOURCE[$i]}
  else
    tar -xzvf $CWD/${SOURCE[$i]}
  fi
done
cd ${PRGNAM}-${VERSION}

chown -R root.root *
find . -perm 777 -exec chmod 755 {} \;


# --- BUILDING ---

echo Building ...

#CFLAGS="$SLKCFLAGS" \
#make 2>&1 | tee $CWD/make-${PRGNAM}.log

gcc -o nrg2iso -Wall $SLKCFLAGS nrg2iso.c

#
# Install all the needed stuff to the package dir
#
mkdir -p $PKG/usr/bin
cp -a nrg2iso $PKG/usr/bin/


# --- DOCUMENTATION ---

mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a $DOCS \
      $PKG/usr/doc/$PRGNAM-$VERSION
chmod -R a-w $PKG/usr/doc/$PRGNAM-$VERSION/*

# Move incorrectly installed man pages, if any
[ -d $PKG/usr/share/man ] && \
  mv $PKG/usr/share/man $PKG/usr/ && rmdir $PKG/usr/share
# Compress the man page(s)
gzip -9f $PKG/usr/man/*/*   2>/dev/null
gzip -9f $PKG/usr/man/*/*/* 2>/dev/null

# Strip binaries
( cd $PKG
  find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
  find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null
)


# --- OWNERSHIP, RIGHTS ---

chmod -R o-w $PKG


# --- PACKAGE DESCRIPTION ---

mkdir -p $PKG/install
cat $CWD/slack-desc > $PKG/install/slack-desc
if [ -f $CWD/doinst.sh ]; then
  cat $CWD/doinst.sh > $PKG/install/doinst.sh
fi
# I give in :-/
if [ -f $CWD/slack-requires ]; then
  cat $CWD/slack-requires > $PKG/install/slack-requires
fi


# --- BUILDING ---

# Build the package:
cd $PKG
/sbin/makepkg --linkadd y --chown n $TMP/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}.tgz \
  2>&1 | tee $CWD/makepkg-${PRGNAM}.log
(cd $TMP && md5sum ${PRGNAM}-${VERSION}-${ARCH}-${BUILD}.tgz > ${PRGNAM}-${VERSION}-${ARCH}-${BUILD}.tgz.md5)
cat $PKG/install/slack-desc | grep "^${PRGNAM}" > $TMP/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}.txt
if [ -f $PKG/install/slack-requires ]; then
  cat $PKG/install/slack-requires > $TMP/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}.dep
fi


# --- CLEANUP ---

# Clean up the extra stuff:
if [ "$1" = "--cleanup" ]; then
  rm -rf $TMP/tmp-$PRGNAM
  rm -rf $PKG
fi
